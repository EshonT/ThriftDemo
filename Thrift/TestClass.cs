/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace CSharpDemo.Thrift
{

#if !SILVERLIGHT
    [Serializable]
#endif
    public partial class TestClass : TBase
    {
        private string _name;
        private int _input;
        private int _output;
        private int _reject;

        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                __isset.name = true;
                this._name = value;
            }
        }

        public int Input
        {
            get
            {
                return _input;
            }
            set
            {
                __isset.input = true;
                this._input = value;
            }
        }

        public int Output
        {
            get
            {
                return _output;
            }
            set
            {
                __isset.output = true;
                this._output = value;
            }
        }

        public int Reject
        {
            get
            {
                return _reject;
            }
            set
            {
                __isset.reject = true;
                this._reject = value;
            }
        }


        public Isset __isset;
#if !SILVERLIGHT
        [Serializable]
#endif
        public struct Isset
        {
            public bool name;
            public bool input;
            public bool output;
            public bool reject;
        }

        public TestClass()
        {
        }

        public void Read(TProtocol iprot)
        {
            iprot.IncrementRecursionDepth();
            try
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                Name = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 2:
                            if (field.Type == TType.I32)
                            {
                                Input = iprot.ReadI32();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 3:
                            if (field.Type == TType.I32)
                            {
                                Output = iprot.ReadI32();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 4:
                            if (field.Type == TType.I32)
                            {
                                Reject = iprot.ReadI32();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }
            finally
            {
                iprot.DecrementRecursionDepth();
            }
        }

        public void Write(TProtocol oprot)
        {
            oprot.IncrementRecursionDepth();
            try
            {
                TStruct struc = new TStruct("TestClass");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (Name != null && __isset.name)
                {
                    field.Name = "name";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Name);
                    oprot.WriteFieldEnd();
                }
                if (__isset.input)
                {
                    field.Name = "input";
                    field.Type = TType.I32;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteI32(Input);
                    oprot.WriteFieldEnd();
                }
                if (__isset.output)
                {
                    field.Name = "output";
                    field.Type = TType.I32;
                    field.ID = 3;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteI32(Output);
                    oprot.WriteFieldEnd();
                }
                if (__isset.reject)
                {
                    field.Name = "reject";
                    field.Type = TType.I32;
                    field.ID = 4;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteI32(Reject);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }
            finally
            {
                oprot.DecrementRecursionDepth();
            }
        }

        public override string ToString()
        {
            StringBuilder __sb = new StringBuilder("TestClass(");
            bool __first = true;
            if (Name != null && __isset.name)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("Name: ");
                __sb.Append(Name);
            }
            if (__isset.input)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("Input: ");
                __sb.Append(Input);
            }
            if (__isset.output)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("Output: ");
                __sb.Append(Output);
            }
            if (__isset.reject)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("Reject: ");
                __sb.Append(Reject);
            }
            __sb.Append(")");
            return __sb.ToString();
        }

    }

}
