/**
 * Autogenerated by Thrift Compiler (0.12.0)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package demo.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2020-10-30")
public class TestClass implements org.apache.thrift.TBase<TestClass, TestClass._Fields>, java.io.Serializable, Cloneable, Comparable<TestClass> {
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TestClass");
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short) 1);
  private static final org.apache.thrift.protocol.TField INPUT_FIELD_DESC = new org.apache.thrift.protocol.TField("input", org.apache.thrift.protocol.TType.I32, (short) 2);
  private static final org.apache.thrift.protocol.TField OUTPUT_FIELD_DESC = new org.apache.thrift.protocol.TField("output", org.apache.thrift.protocol.TType.I32, (short) 3);
  private static final org.apache.thrift.protocol.TField REJECT_FIELD_DESC = new org.apache.thrift.protocol.TField("reject", org.apache.thrift.protocol.TType.I32, (short) 4);
  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TestClassStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TestClassTupleSchemeFactory();
  // isset id assignments
  private static final int __INPUT_ISSET_ID = 0;
  private static final int __OUTPUT_ISSET_ID = 1;
  private static final int __REJECT_ISSET_ID = 2;

  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INPUT, new org.apache.thrift.meta_data.FieldMetaData("input", org.apache.thrift.TFieldRequirementType.DEFAULT,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OUTPUT, new org.apache.thrift.meta_data.FieldMetaData("output", org.apache.thrift.TFieldRequirementType.DEFAULT,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REJECT, new org.apache.thrift.meta_data.FieldMetaData("reject", org.apache.thrift.TFieldRequirementType.DEFAULT,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TestClass.class, metaDataMap);
  }

  public @org.apache.thrift.annotation.Nullable
  String name; // required
  public int input; // required
  public int output; // required
  public int reject; // required
  private byte __isset_bitfield = 0;

  public TestClass() {
  }

  public TestClass(
          String name,
          int input,
          int output,
          int reject) {
    this();
    this.name = name;
    this.input = input;
    setInputIsSet(true);
    this.output = output;
    setOutputIsSet(true);
    this.reject = reject;
    setRejectIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TestClass(TestClass other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetName()) {
      this.name = other.name;
    }
    this.input = other.input;
    this.output = other.output;
    this.reject = other.reject;
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }

  public TestClass deepCopy() {
    return new TestClass(this);
  }

  @Override
  public void clear() {
    this.name = null;
    setInputIsSet(false);
    this.input = 0;
    setOutputIsSet(false);
    this.output = 0;
    setRejectIsSet(false);
    this.reject = 0;
  }

  @org.apache.thrift.annotation.Nullable
  public String getName() {
    return this.name;
  }

  public TestClass setName(@org.apache.thrift.annotation.Nullable String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /**
   * Returns true if field name is set (has been assigned a value) and false otherwise
   */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public int getInput() {
    return this.input;
  }

  public TestClass setInput(int input) {
    this.input = input;
    setInputIsSet(true);
    return this;
  }

  public void unsetInput() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INPUT_ISSET_ID);
  }

  /**
   * Returns true if field input is set (has been assigned a value) and false otherwise
   */
  public boolean isSetInput() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INPUT_ISSET_ID);
  }

  public void setInputIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INPUT_ISSET_ID, value);
  }

  public int getOutput() {
    return this.output;
  }

  public TestClass setOutput(int output) {
    this.output = output;
    setOutputIsSet(true);
    return this;
  }

  public void unsetOutput() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __OUTPUT_ISSET_ID);
  }

  /**
   * Returns true if field output is set (has been assigned a value) and false otherwise
   */
  public boolean isSetOutput() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __OUTPUT_ISSET_ID);
  }

  public void setOutputIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __OUTPUT_ISSET_ID, value);
  }

  public int getReject() {
    return this.reject;
  }

  public TestClass setReject(int reject) {
    this.reject = reject;
    setRejectIsSet(true);
    return this;
  }

  public void unsetReject() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REJECT_ISSET_ID);
  }

  /**
   * Returns true if field reject is set (has been assigned a value) and false otherwise
   */
  public boolean isSetReject() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REJECT_ISSET_ID);
  }

  public void setRejectIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REJECT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
    switch (field) {
      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String) value);
        }
        break;

      case INPUT:
        if (value == null) {
          unsetInput();
        } else {
          setInput((Integer) value);
        }
        break;

      case OUTPUT:
        if (value == null) {
          unsetOutput();
        } else {
          setOutput((Integer) value);
        }
        break;

      case REJECT:
        if (value == null) {
          unsetReject();
        } else {
          setReject((Integer) value);
        }
        break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public Object getFieldValue(_Fields field) {
    switch (field) {
      case NAME:
        return getName();

      case INPUT:
        return getInput();

      case OUTPUT:
        return getOutput();

      case REJECT:
        return getReject();

    }
    throw new IllegalStateException();
  }

  /**
   * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
   */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
      case NAME:
        return isSetName();
      case INPUT:
        return isSetInput();
      case OUTPUT:
        return isSetOutput();
      case REJECT:
        return isSetReject();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TestClass)
      return this.equals((TestClass) that);
    return false;
  }

  public boolean equals(TestClass that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_input = true;
    boolean that_present_input = true;
    if (this_present_input || that_present_input) {
      if (!(this_present_input && that_present_input))
        return false;
      if (this.input != that.input)
        return false;
    }

    boolean this_present_output = true;
    boolean that_present_output = true;
    if (this_present_output || that_present_output) {
      if (!(this_present_output && that_present_output))
        return false;
      if (this.output != that.output)
        return false;
    }

    boolean this_present_reject = true;
    boolean that_present_reject = true;
    if (this_present_reject || that_present_reject) {
      if (!(this_present_reject && that_present_reject))
        return false;
      if (this.reject != that.reject)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName())
      hashCode = hashCode * 8191 + name.hashCode();

    hashCode = hashCode * 8191 + input;

    hashCode = hashCode * 8191 + output;

    hashCode = hashCode * 8191 + reject;

    return hashCode;
  }

  @Override
  public int compareTo(TestClass other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInput()).compareTo(other.isSetInput());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInput()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.input, other.input);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOutput()).compareTo(other.isSetOutput());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutput()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.output, other.output);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReject()).compareTo(other.isSetReject());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReject()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reject, other.reject);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TestClass(");
    boolean first = true;

    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("input:");
    sb.append(this.input);
    first = false;
    if (!first) sb.append(", ");
    sb.append("output:");
    sb.append(this.output);
    first = false;
    if (!first) sb.append(", ");
    sb.append("reject:");
    sb.append(this.reject);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  /**
   * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
   */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NAME((short) 1, "name"),
    INPUT((short) 2, "input"),
    OUTPUT((short) 3, "output"),
    REJECT((short) 4, "reject");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch (fieldId) {
        case 1: // NAME
          return NAME;
        case 2: // INPUT
          return INPUT;
        case 3: // OUTPUT
          return OUTPUT;
        case 4: // REJECT
          return REJECT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  private static class TestClassStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TestClassStandardScheme getScheme() {
      return new TestClassStandardScheme();
    }
  }

  private static class TestClassStandardScheme extends org.apache.thrift.scheme.StandardScheme<TestClass> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TestClass struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true) {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
          break;
        }
        switch (schemeField.id) {
          case 1: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // INPUT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.input = iprot.readI32();
              struct.setInputIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // OUTPUT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.output = iprot.readI32();
              struct.setOutputIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // REJECT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.reject = iprot.readI32();
              struct.setRejectIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TestClass struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(INPUT_FIELD_DESC);
      oprot.writeI32(struct.input);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OUTPUT_FIELD_DESC);
      oprot.writeI32(struct.output);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REJECT_FIELD_DESC);
      oprot.writeI32(struct.reject);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TestClassTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TestClassTupleScheme getScheme() {
      return new TestClassTupleScheme();
    }
  }

  private static class TestClassTupleScheme extends org.apache.thrift.scheme.TupleScheme<TestClass> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TestClass struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetName()) {
        optionals.set(0);
      }
      if (struct.isSetInput()) {
        optionals.set(1);
      }
      if (struct.isSetOutput()) {
        optionals.set(2);
      }
      if (struct.isSetReject()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetInput()) {
        oprot.writeI32(struct.input);
      }
      if (struct.isSetOutput()) {
        oprot.writeI32(struct.output);
      }
      if (struct.isSetReject()) {
        oprot.writeI32(struct.reject);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TestClass struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.input = iprot.readI32();
        struct.setInputIsSet(true);
      }
      if (incoming.get(2)) {
        struct.output = iprot.readI32();
        struct.setOutputIsSet(true);
      }
      if (incoming.get(3)) {
        struct.reject = iprot.readI32();
        struct.setRejectIsSet(true);
      }
    }
  }
}

